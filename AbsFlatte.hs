-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language flatte.

module AbsFlatte where

import Prelude (Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

data Program = ProgramDef Dec
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Dec
    = FDec Type Ident [Arg] Block
    | VDec Type Ident
    | VdecInit Type Ident Expr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Arg = ValArg Ident Type | RefArg Ident Type
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Block = BlockStmt [Stmt]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Stmt
    = DecStmt Dec
    | Assign Ident Expr
    | Incr Ident
    | Decr Ident
    | Ret Expr
    | If Expr Block
    | IfElse Expr Block Block
    | While Expr Block
    | Break
    | Cont
    | SExp Expr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Type = Int | Str | Bool | TypTuple [Type]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Expr
    = EVar Ident
    | ELitInt Integer
    | ELitStr String
    | ETup [Expr]
    | ETupTak Expr Integer
    | ELitTrue
    | ELitFalse
    | ELitMaybe
    | ERunFun Ident [Expr]
    | EMinus Expr
    | ENot Expr
    | EMul Expr MulOp Expr
    | EAdd Expr AddOp Expr
    | EComp Expr CompOp Expr
    | EAnd Expr Expr
    | EOr Expr Expr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data AddOp = Plus | Minus
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data MulOp = Times | Div | Mod
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data CompOp = LTH | LE | GTH | GE | EQU | NE
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Ident = Ident String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

