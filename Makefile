# Makefile generated by BNFC.

GHC        = ghc
HAPPY      = happy
HAPPY_OPTS = --array --info --ghc --coerce
ALEX       = alex
ALEX_OPTS  = --ghc

# List of goals not corresponding to file names.

.PHONY : all clean distclean

# Default goal.

all : Main

# Rules for building the parser.

AbsFlatte.hs LexFlatte.x ParFlatte.y PrintFlatte.hs Helpers.hs Main.hs : flatte.cf
	bnfc --haskell --functor flatte.cf

%.hs : %.y
	${HAPPY} ${HAPPY_OPTS} $<

%.hs : %.x
	${ALEX} ${ALEX_OPTS} $<

Main : AbsFlatte.hs LexFlatte.hs ParFlatte.hs PrintFlatte.hs Helpers.hs Main.hs
	${GHC} ${GHC_OPTS} $@

# Rules for cleaning generated files.

clean :
	-rm -f *.hi *.o *.log *.aux *.dvi

distclean : clean
	-rm -f AbsFlatte.hs AbsFlatte.hs.bak ComposOp.hs ComposOp.hs.bak DocFlatte.txt DocFlatte.txt.bak ErrM.hs ErrM.hs.bak LayoutFlatte.hs LayoutFlatte.hs.bak LexFlatte.x LexFlatte.x.bak ParFlatte.y ParFlatte.y.bak PrintFlatte.hs PrintFlatte.hs.bak SkelFlatte.hs SkelFlatte.hs.bak Main.hs Main.hs.bak XMLFlatte.hs XMLFlatte.hs.bak ASTFlatte.agda ASTFlatte.agda.bak ParserFlatte.agda ParserFlatte.agda.bak IOLib.agda IOLib.agda.bak Main.agda Main.agda.bak flatte.dtd flatte.dtd.bak Main LexFlatte.hs ParFlatte.hs ParFlatte.info ParDataFlatte.hs Makefile


# EOF
