-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from ParFlatte.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	Ident -> L_Ident                                   (1)
	Integer -> L_integ                                 (2)
	String -> L_quoted                                 (3)
	Program -> Dec                                     (4)
	Dec -> Type Ident '(' ListArg ')' ':=' Block       (5)
	Dec -> Type Ident                                  (6)
	Dec -> Type Ident ':=' Expr                        (7)
	Arg -> Ident ':' Type                              (8)
	Arg -> Ident ':&' Type                             (9)
	ListArg ->                                         (10)
	ListArg -> Arg                                     (11)
	ListArg -> Arg ',' ListArg                         (12)
	Block -> '{' ListStmt '}'                          (13)
	ListStmt ->                                        (14)
	ListStmt -> Stmt ListStmt                          (15)
	Stmt -> Dec ';'                                    (16)
	Stmt -> Ident ':=' Expr ';'                        (17)
	Stmt -> Ident '++' ';'                             (18)
	Stmt -> Ident '--' ';'                             (19)
	Stmt -> 'return' Expr ';'                          (20)
	Stmt -> 'if' '(' Expr ')' Block                    (21)
	Stmt -> 'if' '(' Expr ')' Block 'else' Block       (22)
	Stmt -> 'while' '(' Expr ')' Block                 (23)
	Stmt -> 'break' ';'                                (24)
	Stmt -> 'continue' ';'                             (25)
	Stmt -> Expr ';'                                   (26)
	Type -> 'int'                                      (27)
	Type -> 'str'                                      (28)
	Type -> 'bool'                                     (29)
	Type -> '[' ListType ']'                           (30)
	ListType -> Type                                   (31)
	ListType -> Type ',' ListType                      (32)
	Expr6 -> Ident                                     (33)
	Expr6 -> Integer                                   (34)
	Expr6 -> String                                    (35)
	Expr6 -> Tuple                                     (36)
	Expr6 -> Expr6 '^' Integer                         (37)
	Expr6 -> 'true'                                    (38)
	Expr6 -> 'false'                                   (39)
	Expr6 -> 'maybe'                                   (40)
	Expr6 -> Ident '(' ListExpr ')'                    (41)
	Expr6 -> '(' Expr ')'                              (42)
	Tuple -> '[' ListExpr ']'                          (43)
	Expr5 -> '-' Expr6                                 (44)
	Expr5 -> '!' Expr6                                 (45)
	Expr5 -> Expr6                                     (46)
	Expr4 -> Expr4 MulOp Expr5                         (47)
	Expr4 -> Expr5                                     (48)
	Expr3 -> Expr3 AddOp Expr4                         (49)
	Expr3 -> Expr4                                     (50)
	Expr2 -> Expr2 CompOp Expr3                        (51)
	Expr2 -> Expr3                                     (52)
	Expr1 -> Expr2 '&&' Expr1                          (53)
	Expr1 -> Expr2                                     (54)
	Expr -> Expr1 '||' Expr                            (55)
	Expr -> Expr1                                      (56)
	ListExpr ->                                        (57)
	ListExpr -> Expr                                   (58)
	ListExpr -> Expr ',' ListExpr                      (59)
	AddOp -> '+'                                       (60)
	AddOp -> '-'                                       (61)
	MulOp -> '*'                                       (62)
	MulOp -> '/'                                       (63)
	MulOp -> '%'                                       (64)
	CompOp -> '<'                                      (65)
	CompOp -> '<='                                     (66)
	CompOp -> '>'                                      (67)
	CompOp -> '>='                                     (68)
	CompOp -> '=='                                     (69)
	CompOp -> '!='                                     (70)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'!'            { PT _ (TS _ 1) }
	'!='           { PT _ (TS _ 2) }
	'%'            { PT _ (TS _ 3) }
	'&&'           { PT _ (TS _ 4) }
	'('            { PT _ (TS _ 5) }
	')'            { PT _ (TS _ 6) }
	'*'            { PT _ (TS _ 7) }
	'+'            { PT _ (TS _ 8) }
	'++'           { PT _ (TS _ 9) }
	','            { PT _ (TS _ 10) }
	'-'            { PT _ (TS _ 11) }
	'--'           { PT _ (TS _ 12) }
	'/'            { PT _ (TS _ 13) }
	':'            { PT _ (TS _ 14) }
	':&'           { PT _ (TS _ 15) }
	':='           { PT _ (TS _ 16) }
	';'            { PT _ (TS _ 17) }
	'<'            { PT _ (TS _ 18) }
	'<='           { PT _ (TS _ 19) }
	'=='           { PT _ (TS _ 20) }
	'>'            { PT _ (TS _ 21) }
	'>='           { PT _ (TS _ 22) }
	'['            { PT _ (TS _ 23) }
	']'            { PT _ (TS _ 24) }
	'^'            { PT _ (TS _ 25) }
	'bool'         { PT _ (TS _ 26) }
	'break'        { PT _ (TS _ 27) }
	'continue'     { PT _ (TS _ 28) }
	'else'         { PT _ (TS _ 29) }
	'false'        { PT _ (TS _ 30) }
	'if'           { PT _ (TS _ 31) }
	'int'          { PT _ (TS _ 32) }
	'maybe'        { PT _ (TS _ 33) }
	'return'       { PT _ (TS _ 34) }
	'str'          { PT _ (TS _ 35) }
	'true'         { PT _ (TS _ 36) }
	'while'        { PT _ (TS _ 37) }
	'{'            { PT _ (TS _ 38) }
	'||'           { PT _ (TS _ 39) }
	'}'            { PT _ (TS _ 40) }
	L_Ident        { PT _ (TV $$) }
	L_integ        { PT _ (TI $$) }
	L_quoted       { PT _ (TL $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	Ident           rule  1
	Integer         rule  2
	String          rule  3
	Program         rule  4
	Dec             rules 5, 6, 7
	Arg             rules 8, 9
	ListArg         rules 10, 11, 12
	Block           rule  13
	ListStmt        rules 14, 15
	Stmt            rules 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26
	Type            rules 27, 28, 29, 30
	ListType        rules 31, 32
	Expr6           rules 33, 34, 35, 36, 37, 38, 39, 40, 41, 42
	Tuple           rule  43
	Expr5           rules 44, 45, 46
	Expr4           rules 47, 48
	Expr3           rules 49, 50
	Expr2           rules 51, 52
	Expr1           rules 53, 54
	Expr            rules 55, 56
	ListExpr        rules 57, 58, 59
	AddOp           rules 60, 61
	MulOp           rules 62, 63, 64
	CompOp          rules 65, 66, 67, 68, 69, 70

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pProgram -> . Program                        (rule 0)

	'['            shift, and enter state 6
	'bool'         shift, and enter state 7
	'int'          shift, and enter state 8
	'str'          shift, and enter state 9

	Program        goto state 3
	Dec            goto state 4
	Type           goto state 5

State 1

	Ident -> . L_Ident                                  (rule 1)

	L_Ident        shift, and enter state 2


State 2

	Ident -> L_Ident .                                  (rule 1)

	'!='           reduce using rule 1
	'%'            reduce using rule 1
	'&&'           reduce using rule 1
	'('            reduce using rule 1
	')'            reduce using rule 1
	'*'            reduce using rule 1
	'+'            reduce using rule 1
	'++'           reduce using rule 1
	','            reduce using rule 1
	'-'            reduce using rule 1
	'--'           reduce using rule 1
	'/'            reduce using rule 1
	':'            reduce using rule 1
	':&'           reduce using rule 1
	':='           reduce using rule 1
	';'            reduce using rule 1
	'<'            reduce using rule 1
	'<='           reduce using rule 1
	'=='           reduce using rule 1
	'>'            reduce using rule 1
	'>='           reduce using rule 1
	']'            reduce using rule 1
	'^'            reduce using rule 1
	'||'           reduce using rule 1
	%eof           reduce using rule 1


State 3

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 4

	Program -> Dec .                                    (rule 4)

	%eof           reduce using rule 4


State 5

	Dec -> Type . Ident '(' ListArg ')' ':=' Block      (rule 5)
	Dec -> Type . Ident                                 (rule 6)
	Dec -> Type . Ident ':=' Expr                       (rule 7)

	L_Ident        shift, and enter state 2

	Ident          goto state 12

State 6

	Type -> '[' . ListType ']'                          (rule 30)

	'['            shift, and enter state 6
	'bool'         shift, and enter state 7
	'int'          shift, and enter state 8
	'str'          shift, and enter state 9

	Type           goto state 10
	ListType       goto state 11

State 7

	Type -> 'bool' .                                    (rule 29)

	')'            reduce using rule 29
	','            reduce using rule 29
	']'            reduce using rule 29
	L_Ident        reduce using rule 29


State 8

	Type -> 'int' .                                     (rule 27)

	')'            reduce using rule 27
	','            reduce using rule 27
	']'            reduce using rule 27
	L_Ident        reduce using rule 27


State 9

	Type -> 'str' .                                     (rule 28)

	')'            reduce using rule 28
	','            reduce using rule 28
	']'            reduce using rule 28
	L_Ident        reduce using rule 28


State 10

	ListType -> Type .                                  (rule 31)
	ListType -> Type . ',' ListType                     (rule 32)

	','            shift, and enter state 16
	']'            reduce using rule 31


State 11

	Type -> '[' ListType . ']'                          (rule 30)

	']'            shift, and enter state 15


State 12

	Dec -> Type Ident . '(' ListArg ')' ':=' Block      (rule 5)
	Dec -> Type Ident .                                 (rule 6)
	Dec -> Type Ident . ':=' Expr                       (rule 7)

	'('            shift, and enter state 13
	':='           shift, and enter state 14
	';'            reduce using rule 6
	%eof           reduce using rule 6


State 13

	Dec -> Type Ident '(' . ListArg ')' ':=' Block      (rule 5)

	')'            reduce using rule 10
	L_Ident        shift, and enter state 2

	Ident          goto state 38
	Arg            goto state 39
	ListArg        goto state 40

State 14

	Dec -> Type Ident ':=' . Expr                       (rule 7)

	'!'            shift, and enter state 29
	'('            shift, and enter state 30
	'-'            shift, and enter state 31
	'['            shift, and enter state 32
	'false'        shift, and enter state 33
	'maybe'        shift, and enter state 34
	'true'         shift, and enter state 35
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 36
	L_quoted       shift, and enter state 37

	Ident          goto state 18
	Integer        goto state 19
	String         goto state 20
	Expr6          goto state 21
	Tuple          goto state 22
	Expr5          goto state 23
	Expr4          goto state 24
	Expr3          goto state 25
	Expr2          goto state 26
	Expr1          goto state 27
	Expr           goto state 28

State 15

	Type -> '[' ListType ']' .                          (rule 30)

	')'            reduce using rule 30
	','            reduce using rule 30
	']'            reduce using rule 30
	L_Ident        reduce using rule 30


State 16

	ListType -> Type ',' . ListType                     (rule 32)

	'['            shift, and enter state 6
	'bool'         shift, and enter state 7
	'int'          shift, and enter state 8
	'str'          shift, and enter state 9

	Type           goto state 10
	ListType       goto state 17

State 17

	ListType -> Type ',' ListType .                     (rule 32)

	']'            reduce using rule 32


State 18

	Expr6 -> Ident .                                    (rule 33)
	Expr6 -> Ident . '(' ListExpr ')'                   (rule 41)

	'!='           reduce using rule 33
	'%'            reduce using rule 33
	'&&'           reduce using rule 33
	'('            shift, and enter state 67
	')'            reduce using rule 33
	'*'            reduce using rule 33
	'+'            reduce using rule 33
	','            reduce using rule 33
	'-'            reduce using rule 33
	'/'            reduce using rule 33
	';'            reduce using rule 33
	'<'            reduce using rule 33
	'<='           reduce using rule 33
	'=='           reduce using rule 33
	'>'            reduce using rule 33
	'>='           reduce using rule 33
	']'            reduce using rule 33
	'^'            reduce using rule 33
	'||'           reduce using rule 33
	%eof           reduce using rule 33


State 19

	Expr6 -> Integer .                                  (rule 34)

	'!='           reduce using rule 34
	'%'            reduce using rule 34
	'&&'           reduce using rule 34
	')'            reduce using rule 34
	'*'            reduce using rule 34
	'+'            reduce using rule 34
	','            reduce using rule 34
	'-'            reduce using rule 34
	'/'            reduce using rule 34
	';'            reduce using rule 34
	'<'            reduce using rule 34
	'<='           reduce using rule 34
	'=='           reduce using rule 34
	'>'            reduce using rule 34
	'>='           reduce using rule 34
	']'            reduce using rule 34
	'^'            reduce using rule 34
	'||'           reduce using rule 34
	%eof           reduce using rule 34


State 20

	Expr6 -> String .                                   (rule 35)

	'!='           reduce using rule 35
	'%'            reduce using rule 35
	'&&'           reduce using rule 35
	')'            reduce using rule 35
	'*'            reduce using rule 35
	'+'            reduce using rule 35
	','            reduce using rule 35
	'-'            reduce using rule 35
	'/'            reduce using rule 35
	';'            reduce using rule 35
	'<'            reduce using rule 35
	'<='           reduce using rule 35
	'=='           reduce using rule 35
	'>'            reduce using rule 35
	'>='           reduce using rule 35
	']'            reduce using rule 35
	'^'            reduce using rule 35
	'||'           reduce using rule 35
	%eof           reduce using rule 35


State 21

	Expr6 -> Expr6 . '^' Integer                        (rule 37)
	Expr5 -> Expr6 .                                    (rule 46)

	'!='           reduce using rule 46
	'%'            reduce using rule 46
	'&&'           reduce using rule 46
	')'            reduce using rule 46
	'*'            reduce using rule 46
	'+'            reduce using rule 46
	','            reduce using rule 46
	'-'            reduce using rule 46
	'/'            reduce using rule 46
	';'            reduce using rule 46
	'<'            reduce using rule 46
	'<='           reduce using rule 46
	'=='           reduce using rule 46
	'>'            reduce using rule 46
	'>='           reduce using rule 46
	']'            reduce using rule 46
	'^'            shift, and enter state 66
	'||'           reduce using rule 46
	%eof           reduce using rule 46


State 22

	Expr6 -> Tuple .                                    (rule 36)

	'!='           reduce using rule 36
	'%'            reduce using rule 36
	'&&'           reduce using rule 36
	')'            reduce using rule 36
	'*'            reduce using rule 36
	'+'            reduce using rule 36
	','            reduce using rule 36
	'-'            reduce using rule 36
	'/'            reduce using rule 36
	';'            reduce using rule 36
	'<'            reduce using rule 36
	'<='           reduce using rule 36
	'=='           reduce using rule 36
	'>'            reduce using rule 36
	'>='           reduce using rule 36
	']'            reduce using rule 36
	'^'            reduce using rule 36
	'||'           reduce using rule 36
	%eof           reduce using rule 36


State 23

	Expr4 -> Expr5 .                                    (rule 48)

	'!='           reduce using rule 48
	'%'            reduce using rule 48
	'&&'           reduce using rule 48
	')'            reduce using rule 48
	'*'            reduce using rule 48
	'+'            reduce using rule 48
	','            reduce using rule 48
	'-'            reduce using rule 48
	'/'            reduce using rule 48
	';'            reduce using rule 48
	'<'            reduce using rule 48
	'<='           reduce using rule 48
	'=='           reduce using rule 48
	'>'            reduce using rule 48
	'>='           reduce using rule 48
	']'            reduce using rule 48
	'||'           reduce using rule 48
	%eof           reduce using rule 48


State 24

	Expr4 -> Expr4 . MulOp Expr5                        (rule 47)
	Expr3 -> Expr4 .                                    (rule 50)

	'!='           reduce using rule 50
	'%'            shift, and enter state 63
	'&&'           reduce using rule 50
	')'            reduce using rule 50
	'*'            shift, and enter state 64
	'+'            reduce using rule 50
	','            reduce using rule 50
	'-'            reduce using rule 50
	'/'            shift, and enter state 65
	';'            reduce using rule 50
	'<'            reduce using rule 50
	'<='           reduce using rule 50
	'=='           reduce using rule 50
	'>'            reduce using rule 50
	'>='           reduce using rule 50
	']'            reduce using rule 50
	'||'           reduce using rule 50
	%eof           reduce using rule 50

	MulOp          goto state 62

State 25

	Expr3 -> Expr3 . AddOp Expr4                        (rule 49)
	Expr2 -> Expr3 .                                    (rule 52)

	'!='           reduce using rule 52
	'&&'           reduce using rule 52
	')'            reduce using rule 52
	'+'            shift, and enter state 60
	','            reduce using rule 52
	'-'            shift, and enter state 61
	';'            reduce using rule 52
	'<'            reduce using rule 52
	'<='           reduce using rule 52
	'=='           reduce using rule 52
	'>'            reduce using rule 52
	'>='           reduce using rule 52
	']'            reduce using rule 52
	'||'           reduce using rule 52
	%eof           reduce using rule 52

	AddOp          goto state 59

State 26

	Expr2 -> Expr2 . CompOp Expr3                       (rule 51)
	Expr1 -> Expr2 . '&&' Expr1                         (rule 53)
	Expr1 -> Expr2 .                                    (rule 54)

	'!='           shift, and enter state 52
	'&&'           shift, and enter state 53
	')'            reduce using rule 54
	','            reduce using rule 54
	';'            reduce using rule 54
	'<'            shift, and enter state 54
	'<='           shift, and enter state 55
	'=='           shift, and enter state 56
	'>'            shift, and enter state 57
	'>='           shift, and enter state 58
	']'            reduce using rule 54
	'||'           reduce using rule 54
	%eof           reduce using rule 54

	CompOp         goto state 51

State 27

	Expr -> Expr1 . '||' Expr                           (rule 55)
	Expr -> Expr1 .                                     (rule 56)

	')'            reduce using rule 56
	','            reduce using rule 56
	';'            reduce using rule 56
	']'            reduce using rule 56
	'||'           shift, and enter state 50
	%eof           reduce using rule 56


State 28

	Dec -> Type Ident ':=' Expr .                       (rule 7)

	';'            reduce using rule 7
	%eof           reduce using rule 7


State 29

	Expr5 -> '!' . Expr6                                (rule 45)

	'('            shift, and enter state 30
	'['            shift, and enter state 32
	'false'        shift, and enter state 33
	'maybe'        shift, and enter state 34
	'true'         shift, and enter state 35
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 36
	L_quoted       shift, and enter state 37

	Ident          goto state 18
	Integer        goto state 19
	String         goto state 20
	Expr6          goto state 49
	Tuple          goto state 22

State 30

	Expr6 -> '(' . Expr ')'                             (rule 42)

	'!'            shift, and enter state 29
	'('            shift, and enter state 30
	'-'            shift, and enter state 31
	'['            shift, and enter state 32
	'false'        shift, and enter state 33
	'maybe'        shift, and enter state 34
	'true'         shift, and enter state 35
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 36
	L_quoted       shift, and enter state 37

	Ident          goto state 18
	Integer        goto state 19
	String         goto state 20
	Expr6          goto state 21
	Tuple          goto state 22
	Expr5          goto state 23
	Expr4          goto state 24
	Expr3          goto state 25
	Expr2          goto state 26
	Expr1          goto state 27
	Expr           goto state 48

State 31

	Expr5 -> '-' . Expr6                                (rule 44)

	'('            shift, and enter state 30
	'['            shift, and enter state 32
	'false'        shift, and enter state 33
	'maybe'        shift, and enter state 34
	'true'         shift, and enter state 35
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 36
	L_quoted       shift, and enter state 37

	Ident          goto state 18
	Integer        goto state 19
	String         goto state 20
	Expr6          goto state 47
	Tuple          goto state 22

State 32

	Tuple -> '[' . ListExpr ']'                         (rule 43)

	'!'            shift, and enter state 29
	'('            shift, and enter state 30
	'-'            shift, and enter state 31
	'['            shift, and enter state 32
	']'            reduce using rule 57
	'false'        shift, and enter state 33
	'maybe'        shift, and enter state 34
	'true'         shift, and enter state 35
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 36
	L_quoted       shift, and enter state 37

	Ident          goto state 18
	Integer        goto state 19
	String         goto state 20
	Expr6          goto state 21
	Tuple          goto state 22
	Expr5          goto state 23
	Expr4          goto state 24
	Expr3          goto state 25
	Expr2          goto state 26
	Expr1          goto state 27
	Expr           goto state 45
	ListExpr       goto state 46

State 33

	Expr6 -> 'false' .                                  (rule 39)

	'!='           reduce using rule 39
	'%'            reduce using rule 39
	'&&'           reduce using rule 39
	')'            reduce using rule 39
	'*'            reduce using rule 39
	'+'            reduce using rule 39
	','            reduce using rule 39
	'-'            reduce using rule 39
	'/'            reduce using rule 39
	';'            reduce using rule 39
	'<'            reduce using rule 39
	'<='           reduce using rule 39
	'=='           reduce using rule 39
	'>'            reduce using rule 39
	'>='           reduce using rule 39
	']'            reduce using rule 39
	'^'            reduce using rule 39
	'||'           reduce using rule 39
	%eof           reduce using rule 39


State 34

	Expr6 -> 'maybe' .                                  (rule 40)

	'!='           reduce using rule 40
	'%'            reduce using rule 40
	'&&'           reduce using rule 40
	')'            reduce using rule 40
	'*'            reduce using rule 40
	'+'            reduce using rule 40
	','            reduce using rule 40
	'-'            reduce using rule 40
	'/'            reduce using rule 40
	';'            reduce using rule 40
	'<'            reduce using rule 40
	'<='           reduce using rule 40
	'=='           reduce using rule 40
	'>'            reduce using rule 40
	'>='           reduce using rule 40
	']'            reduce using rule 40
	'^'            reduce using rule 40
	'||'           reduce using rule 40
	%eof           reduce using rule 40


State 35

	Expr6 -> 'true' .                                   (rule 38)

	'!='           reduce using rule 38
	'%'            reduce using rule 38
	'&&'           reduce using rule 38
	')'            reduce using rule 38
	'*'            reduce using rule 38
	'+'            reduce using rule 38
	','            reduce using rule 38
	'-'            reduce using rule 38
	'/'            reduce using rule 38
	';'            reduce using rule 38
	'<'            reduce using rule 38
	'<='           reduce using rule 38
	'=='           reduce using rule 38
	'>'            reduce using rule 38
	'>='           reduce using rule 38
	']'            reduce using rule 38
	'^'            reduce using rule 38
	'||'           reduce using rule 38
	%eof           reduce using rule 38


State 36

	Integer -> L_integ .                                (rule 2)

	'!='           reduce using rule 2
	'%'            reduce using rule 2
	'&&'           reduce using rule 2
	')'            reduce using rule 2
	'*'            reduce using rule 2
	'+'            reduce using rule 2
	','            reduce using rule 2
	'-'            reduce using rule 2
	'/'            reduce using rule 2
	';'            reduce using rule 2
	'<'            reduce using rule 2
	'<='           reduce using rule 2
	'=='           reduce using rule 2
	'>'            reduce using rule 2
	'>='           reduce using rule 2
	']'            reduce using rule 2
	'^'            reduce using rule 2
	'||'           reduce using rule 2
	%eof           reduce using rule 2


State 37

	String -> L_quoted .                                (rule 3)

	'!='           reduce using rule 3
	'%'            reduce using rule 3
	'&&'           reduce using rule 3
	')'            reduce using rule 3
	'*'            reduce using rule 3
	'+'            reduce using rule 3
	','            reduce using rule 3
	'-'            reduce using rule 3
	'/'            reduce using rule 3
	';'            reduce using rule 3
	'<'            reduce using rule 3
	'<='           reduce using rule 3
	'=='           reduce using rule 3
	'>'            reduce using rule 3
	'>='           reduce using rule 3
	']'            reduce using rule 3
	'^'            reduce using rule 3
	'||'           reduce using rule 3
	%eof           reduce using rule 3


State 38

	Arg -> Ident . ':' Type                             (rule 8)
	Arg -> Ident . ':&' Type                            (rule 9)

	':'            shift, and enter state 43
	':&'           shift, and enter state 44


State 39

	ListArg -> Arg .                                    (rule 11)
	ListArg -> Arg . ',' ListArg                        (rule 12)

	')'            reduce using rule 11
	','            shift, and enter state 42


State 40

	Dec -> Type Ident '(' ListArg . ')' ':=' Block      (rule 5)

	')'            shift, and enter state 41


State 41

	Dec -> Type Ident '(' ListArg ')' . ':=' Block      (rule 5)

	':='           shift, and enter state 81


State 42

	ListArg -> Arg ',' . ListArg                        (rule 12)

	')'            reduce using rule 10
	L_Ident        shift, and enter state 2

	Ident          goto state 38
	Arg            goto state 39
	ListArg        goto state 80

State 43

	Arg -> Ident ':' . Type                             (rule 8)

	'['            shift, and enter state 6
	'bool'         shift, and enter state 7
	'int'          shift, and enter state 8
	'str'          shift, and enter state 9

	Type           goto state 79

State 44

	Arg -> Ident ':&' . Type                            (rule 9)

	'['            shift, and enter state 6
	'bool'         shift, and enter state 7
	'int'          shift, and enter state 8
	'str'          shift, and enter state 9

	Type           goto state 78

State 45

	ListExpr -> Expr .                                  (rule 58)
	ListExpr -> Expr . ',' ListExpr                     (rule 59)

	')'            reduce using rule 58
	','            shift, and enter state 77
	']'            reduce using rule 58


State 46

	Tuple -> '[' ListExpr . ']'                         (rule 43)

	']'            shift, and enter state 76


State 47

	Expr6 -> Expr6 . '^' Integer                        (rule 37)
	Expr5 -> '-' Expr6 .                                (rule 44)

	'!='           reduce using rule 44
	'%'            reduce using rule 44
	'&&'           reduce using rule 44
	')'            reduce using rule 44
	'*'            reduce using rule 44
	'+'            reduce using rule 44
	','            reduce using rule 44
	'-'            reduce using rule 44
	'/'            reduce using rule 44
	';'            reduce using rule 44
	'<'            reduce using rule 44
	'<='           reduce using rule 44
	'=='           reduce using rule 44
	'>'            reduce using rule 44
	'>='           reduce using rule 44
	']'            reduce using rule 44
	'^'            shift, and enter state 66
	'||'           reduce using rule 44
	%eof           reduce using rule 44


State 48

	Expr6 -> '(' Expr . ')'                             (rule 42)

	')'            shift, and enter state 75


State 49

	Expr6 -> Expr6 . '^' Integer                        (rule 37)
	Expr5 -> '!' Expr6 .                                (rule 45)

	'!='           reduce using rule 45
	'%'            reduce using rule 45
	'&&'           reduce using rule 45
	')'            reduce using rule 45
	'*'            reduce using rule 45
	'+'            reduce using rule 45
	','            reduce using rule 45
	'-'            reduce using rule 45
	'/'            reduce using rule 45
	';'            reduce using rule 45
	'<'            reduce using rule 45
	'<='           reduce using rule 45
	'=='           reduce using rule 45
	'>'            reduce using rule 45
	'>='           reduce using rule 45
	']'            reduce using rule 45
	'^'            shift, and enter state 66
	'||'           reduce using rule 45
	%eof           reduce using rule 45


State 50

	Expr -> Expr1 '||' . Expr                           (rule 55)

	'!'            shift, and enter state 29
	'('            shift, and enter state 30
	'-'            shift, and enter state 31
	'['            shift, and enter state 32
	'false'        shift, and enter state 33
	'maybe'        shift, and enter state 34
	'true'         shift, and enter state 35
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 36
	L_quoted       shift, and enter state 37

	Ident          goto state 18
	Integer        goto state 19
	String         goto state 20
	Expr6          goto state 21
	Tuple          goto state 22
	Expr5          goto state 23
	Expr4          goto state 24
	Expr3          goto state 25
	Expr2          goto state 26
	Expr1          goto state 27
	Expr           goto state 74

State 51

	Expr2 -> Expr2 CompOp . Expr3                       (rule 51)

	'!'            shift, and enter state 29
	'('            shift, and enter state 30
	'-'            shift, and enter state 31
	'['            shift, and enter state 32
	'false'        shift, and enter state 33
	'maybe'        shift, and enter state 34
	'true'         shift, and enter state 35
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 36
	L_quoted       shift, and enter state 37

	Ident          goto state 18
	Integer        goto state 19
	String         goto state 20
	Expr6          goto state 21
	Tuple          goto state 22
	Expr5          goto state 23
	Expr4          goto state 24
	Expr3          goto state 73

State 52

	CompOp -> '!=' .                                    (rule 70)

	'!'            reduce using rule 70
	'('            reduce using rule 70
	'-'            reduce using rule 70
	'['            reduce using rule 70
	'false'        reduce using rule 70
	'maybe'        reduce using rule 70
	'true'         reduce using rule 70
	L_Ident        reduce using rule 70
	L_integ        reduce using rule 70
	L_quoted       reduce using rule 70


State 53

	Expr1 -> Expr2 '&&' . Expr1                         (rule 53)

	'!'            shift, and enter state 29
	'('            shift, and enter state 30
	'-'            shift, and enter state 31
	'['            shift, and enter state 32
	'false'        shift, and enter state 33
	'maybe'        shift, and enter state 34
	'true'         shift, and enter state 35
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 36
	L_quoted       shift, and enter state 37

	Ident          goto state 18
	Integer        goto state 19
	String         goto state 20
	Expr6          goto state 21
	Tuple          goto state 22
	Expr5          goto state 23
	Expr4          goto state 24
	Expr3          goto state 25
	Expr2          goto state 26
	Expr1          goto state 72

State 54

	CompOp -> '<' .                                     (rule 65)

	'!'            reduce using rule 65
	'('            reduce using rule 65
	'-'            reduce using rule 65
	'['            reduce using rule 65
	'false'        reduce using rule 65
	'maybe'        reduce using rule 65
	'true'         reduce using rule 65
	L_Ident        reduce using rule 65
	L_integ        reduce using rule 65
	L_quoted       reduce using rule 65


State 55

	CompOp -> '<=' .                                    (rule 66)

	'!'            reduce using rule 66
	'('            reduce using rule 66
	'-'            reduce using rule 66
	'['            reduce using rule 66
	'false'        reduce using rule 66
	'maybe'        reduce using rule 66
	'true'         reduce using rule 66
	L_Ident        reduce using rule 66
	L_integ        reduce using rule 66
	L_quoted       reduce using rule 66


State 56

	CompOp -> '==' .                                    (rule 69)

	'!'            reduce using rule 69
	'('            reduce using rule 69
	'-'            reduce using rule 69
	'['            reduce using rule 69
	'false'        reduce using rule 69
	'maybe'        reduce using rule 69
	'true'         reduce using rule 69
	L_Ident        reduce using rule 69
	L_integ        reduce using rule 69
	L_quoted       reduce using rule 69


State 57

	CompOp -> '>' .                                     (rule 67)

	'!'            reduce using rule 67
	'('            reduce using rule 67
	'-'            reduce using rule 67
	'['            reduce using rule 67
	'false'        reduce using rule 67
	'maybe'        reduce using rule 67
	'true'         reduce using rule 67
	L_Ident        reduce using rule 67
	L_integ        reduce using rule 67
	L_quoted       reduce using rule 67


State 58

	CompOp -> '>=' .                                    (rule 68)

	'!'            reduce using rule 68
	'('            reduce using rule 68
	'-'            reduce using rule 68
	'['            reduce using rule 68
	'false'        reduce using rule 68
	'maybe'        reduce using rule 68
	'true'         reduce using rule 68
	L_Ident        reduce using rule 68
	L_integ        reduce using rule 68
	L_quoted       reduce using rule 68


State 59

	Expr3 -> Expr3 AddOp . Expr4                        (rule 49)

	'!'            shift, and enter state 29
	'('            shift, and enter state 30
	'-'            shift, and enter state 31
	'['            shift, and enter state 32
	'false'        shift, and enter state 33
	'maybe'        shift, and enter state 34
	'true'         shift, and enter state 35
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 36
	L_quoted       shift, and enter state 37

	Ident          goto state 18
	Integer        goto state 19
	String         goto state 20
	Expr6          goto state 21
	Tuple          goto state 22
	Expr5          goto state 23
	Expr4          goto state 71

State 60

	AddOp -> '+' .                                      (rule 60)

	'!'            reduce using rule 60
	'('            reduce using rule 60
	'-'            reduce using rule 60
	'['            reduce using rule 60
	'false'        reduce using rule 60
	'maybe'        reduce using rule 60
	'true'         reduce using rule 60
	L_Ident        reduce using rule 60
	L_integ        reduce using rule 60
	L_quoted       reduce using rule 60


State 61

	AddOp -> '-' .                                      (rule 61)

	'!'            reduce using rule 61
	'('            reduce using rule 61
	'-'            reduce using rule 61
	'['            reduce using rule 61
	'false'        reduce using rule 61
	'maybe'        reduce using rule 61
	'true'         reduce using rule 61
	L_Ident        reduce using rule 61
	L_integ        reduce using rule 61
	L_quoted       reduce using rule 61


State 62

	Expr4 -> Expr4 MulOp . Expr5                        (rule 47)

	'!'            shift, and enter state 29
	'('            shift, and enter state 30
	'-'            shift, and enter state 31
	'['            shift, and enter state 32
	'false'        shift, and enter state 33
	'maybe'        shift, and enter state 34
	'true'         shift, and enter state 35
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 36
	L_quoted       shift, and enter state 37

	Ident          goto state 18
	Integer        goto state 19
	String         goto state 20
	Expr6          goto state 21
	Tuple          goto state 22
	Expr5          goto state 70

State 63

	MulOp -> '%' .                                      (rule 64)

	'!'            reduce using rule 64
	'('            reduce using rule 64
	'-'            reduce using rule 64
	'['            reduce using rule 64
	'false'        reduce using rule 64
	'maybe'        reduce using rule 64
	'true'         reduce using rule 64
	L_Ident        reduce using rule 64
	L_integ        reduce using rule 64
	L_quoted       reduce using rule 64


State 64

	MulOp -> '*' .                                      (rule 62)

	'!'            reduce using rule 62
	'('            reduce using rule 62
	'-'            reduce using rule 62
	'['            reduce using rule 62
	'false'        reduce using rule 62
	'maybe'        reduce using rule 62
	'true'         reduce using rule 62
	L_Ident        reduce using rule 62
	L_integ        reduce using rule 62
	L_quoted       reduce using rule 62


State 65

	MulOp -> '/' .                                      (rule 63)

	'!'            reduce using rule 63
	'('            reduce using rule 63
	'-'            reduce using rule 63
	'['            reduce using rule 63
	'false'        reduce using rule 63
	'maybe'        reduce using rule 63
	'true'         reduce using rule 63
	L_Ident        reduce using rule 63
	L_integ        reduce using rule 63
	L_quoted       reduce using rule 63


State 66

	Expr6 -> Expr6 '^' . Integer                        (rule 37)

	L_integ        shift, and enter state 36

	Integer        goto state 69

State 67

	Expr6 -> Ident '(' . ListExpr ')'                   (rule 41)

	'!'            shift, and enter state 29
	'('            shift, and enter state 30
	')'            reduce using rule 57
	'-'            shift, and enter state 31
	'['            shift, and enter state 32
	'false'        shift, and enter state 33
	'maybe'        shift, and enter state 34
	'true'         shift, and enter state 35
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 36
	L_quoted       shift, and enter state 37

	Ident          goto state 18
	Integer        goto state 19
	String         goto state 20
	Expr6          goto state 21
	Tuple          goto state 22
	Expr5          goto state 23
	Expr4          goto state 24
	Expr3          goto state 25
	Expr2          goto state 26
	Expr1          goto state 27
	Expr           goto state 45
	ListExpr       goto state 68

State 68

	Expr6 -> Ident '(' ListExpr . ')'                   (rule 41)

	')'            shift, and enter state 85


State 69

	Expr6 -> Expr6 '^' Integer .                        (rule 37)

	'!='           reduce using rule 37
	'%'            reduce using rule 37
	'&&'           reduce using rule 37
	')'            reduce using rule 37
	'*'            reduce using rule 37
	'+'            reduce using rule 37
	','            reduce using rule 37
	'-'            reduce using rule 37
	'/'            reduce using rule 37
	';'            reduce using rule 37
	'<'            reduce using rule 37
	'<='           reduce using rule 37
	'=='           reduce using rule 37
	'>'            reduce using rule 37
	'>='           reduce using rule 37
	']'            reduce using rule 37
	'^'            reduce using rule 37
	'||'           reduce using rule 37
	%eof           reduce using rule 37


State 70

	Expr4 -> Expr4 MulOp Expr5 .                        (rule 47)

	'!='           reduce using rule 47
	'%'            reduce using rule 47
	'&&'           reduce using rule 47
	')'            reduce using rule 47
	'*'            reduce using rule 47
	'+'            reduce using rule 47
	','            reduce using rule 47
	'-'            reduce using rule 47
	'/'            reduce using rule 47
	';'            reduce using rule 47
	'<'            reduce using rule 47
	'<='           reduce using rule 47
	'=='           reduce using rule 47
	'>'            reduce using rule 47
	'>='           reduce using rule 47
	']'            reduce using rule 47
	'||'           reduce using rule 47
	%eof           reduce using rule 47


State 71

	Expr4 -> Expr4 . MulOp Expr5                        (rule 47)
	Expr3 -> Expr3 AddOp Expr4 .                        (rule 49)

	'!='           reduce using rule 49
	'%'            shift, and enter state 63
	'&&'           reduce using rule 49
	')'            reduce using rule 49
	'*'            shift, and enter state 64
	'+'            reduce using rule 49
	','            reduce using rule 49
	'-'            reduce using rule 49
	'/'            shift, and enter state 65
	';'            reduce using rule 49
	'<'            reduce using rule 49
	'<='           reduce using rule 49
	'=='           reduce using rule 49
	'>'            reduce using rule 49
	'>='           reduce using rule 49
	']'            reduce using rule 49
	'||'           reduce using rule 49
	%eof           reduce using rule 49

	MulOp          goto state 62

State 72

	Expr1 -> Expr2 '&&' Expr1 .                         (rule 53)

	')'            reduce using rule 53
	','            reduce using rule 53
	';'            reduce using rule 53
	']'            reduce using rule 53
	'||'           reduce using rule 53
	%eof           reduce using rule 53


State 73

	Expr3 -> Expr3 . AddOp Expr4                        (rule 49)
	Expr2 -> Expr2 CompOp Expr3 .                       (rule 51)

	'!='           reduce using rule 51
	'&&'           reduce using rule 51
	')'            reduce using rule 51
	'+'            shift, and enter state 60
	','            reduce using rule 51
	'-'            shift, and enter state 61
	';'            reduce using rule 51
	'<'            reduce using rule 51
	'<='           reduce using rule 51
	'=='           reduce using rule 51
	'>'            reduce using rule 51
	'>='           reduce using rule 51
	']'            reduce using rule 51
	'||'           reduce using rule 51
	%eof           reduce using rule 51

	AddOp          goto state 59

State 74

	Expr -> Expr1 '||' Expr .                           (rule 55)

	')'            reduce using rule 55
	','            reduce using rule 55
	';'            reduce using rule 55
	']'            reduce using rule 55
	%eof           reduce using rule 55


State 75

	Expr6 -> '(' Expr ')' .                             (rule 42)

	'!='           reduce using rule 42
	'%'            reduce using rule 42
	'&&'           reduce using rule 42
	')'            reduce using rule 42
	'*'            reduce using rule 42
	'+'            reduce using rule 42
	','            reduce using rule 42
	'-'            reduce using rule 42
	'/'            reduce using rule 42
	';'            reduce using rule 42
	'<'            reduce using rule 42
	'<='           reduce using rule 42
	'=='           reduce using rule 42
	'>'            reduce using rule 42
	'>='           reduce using rule 42
	']'            reduce using rule 42
	'^'            reduce using rule 42
	'||'           reduce using rule 42
	%eof           reduce using rule 42


State 76

	Tuple -> '[' ListExpr ']' .                         (rule 43)

	'!='           reduce using rule 43
	'%'            reduce using rule 43
	'&&'           reduce using rule 43
	')'            reduce using rule 43
	'*'            reduce using rule 43
	'+'            reduce using rule 43
	','            reduce using rule 43
	'-'            reduce using rule 43
	'/'            reduce using rule 43
	';'            reduce using rule 43
	'<'            reduce using rule 43
	'<='           reduce using rule 43
	'=='           reduce using rule 43
	'>'            reduce using rule 43
	'>='           reduce using rule 43
	']'            reduce using rule 43
	'^'            reduce using rule 43
	'||'           reduce using rule 43
	%eof           reduce using rule 43


State 77

	ListExpr -> Expr ',' . ListExpr                     (rule 59)

	'!'            shift, and enter state 29
	'('            shift, and enter state 30
	')'            reduce using rule 57
	'-'            shift, and enter state 31
	'['            shift, and enter state 32
	']'            reduce using rule 57
	'false'        shift, and enter state 33
	'maybe'        shift, and enter state 34
	'true'         shift, and enter state 35
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 36
	L_quoted       shift, and enter state 37

	Ident          goto state 18
	Integer        goto state 19
	String         goto state 20
	Expr6          goto state 21
	Tuple          goto state 22
	Expr5          goto state 23
	Expr4          goto state 24
	Expr3          goto state 25
	Expr2          goto state 26
	Expr1          goto state 27
	Expr           goto state 45
	ListExpr       goto state 84

State 78

	Arg -> Ident ':&' Type .                            (rule 9)

	')'            reduce using rule 9
	','            reduce using rule 9


State 79

	Arg -> Ident ':' Type .                             (rule 8)

	')'            reduce using rule 8
	','            reduce using rule 8


State 80

	ListArg -> Arg ',' ListArg .                        (rule 12)

	')'            reduce using rule 12


State 81

	Dec -> Type Ident '(' ListArg ')' ':=' . Block      (rule 5)

	'{'            shift, and enter state 83

	Block          goto state 82

State 82

	Dec -> Type Ident '(' ListArg ')' ':=' Block .      (rule 5)

	';'            reduce using rule 5
	%eof           reduce using rule 5


State 83

	Block -> '{' . ListStmt '}'                         (rule 13)

	'!'            shift, and enter state 29
	'('            shift, and enter state 30
	'-'            shift, and enter state 31
	'['            shift, and enter state 91
	'bool'         shift, and enter state 7
	'break'        shift, and enter state 92
	'continue'     shift, and enter state 93
	'false'        shift, and enter state 33
	'if'           shift, and enter state 94
	'int'          shift, and enter state 8
	'maybe'        shift, and enter state 34
	'return'       shift, and enter state 95
	'str'          shift, and enter state 9
	'true'         shift, and enter state 35
	'while'        shift, and enter state 96
	'}'            reduce using rule 14
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 36
	L_quoted       shift, and enter state 37

	Ident          goto state 86
	Integer        goto state 19
	String         goto state 20
	Dec            goto state 87
	ListStmt       goto state 88
	Stmt           goto state 89
	Type           goto state 5
	Expr6          goto state 21
	Tuple          goto state 22
	Expr5          goto state 23
	Expr4          goto state 24
	Expr3          goto state 25
	Expr2          goto state 26
	Expr1          goto state 27
	Expr           goto state 90

State 84

	ListExpr -> Expr ',' ListExpr .                     (rule 59)

	')'            reduce using rule 59
	']'            reduce using rule 59


State 85

	Expr6 -> Ident '(' ListExpr ')' .                   (rule 41)

	'!='           reduce using rule 41
	'%'            reduce using rule 41
	'&&'           reduce using rule 41
	')'            reduce using rule 41
	'*'            reduce using rule 41
	'+'            reduce using rule 41
	','            reduce using rule 41
	'-'            reduce using rule 41
	'/'            reduce using rule 41
	';'            reduce using rule 41
	'<'            reduce using rule 41
	'<='           reduce using rule 41
	'=='           reduce using rule 41
	'>'            reduce using rule 41
	'>='           reduce using rule 41
	']'            reduce using rule 41
	'^'            reduce using rule 41
	'||'           reduce using rule 41
	%eof           reduce using rule 41


State 86

	Stmt -> Ident . ':=' Expr ';'                       (rule 17)
	Stmt -> Ident . '++' ';'                            (rule 18)
	Stmt -> Ident . '--' ';'                            (rule 19)
	Expr6 -> Ident .                                    (rule 33)
	Expr6 -> Ident . '(' ListExpr ')'                   (rule 41)

	'!='           reduce using rule 33
	'%'            reduce using rule 33
	'&&'           reduce using rule 33
	'('            shift, and enter state 67
	'*'            reduce using rule 33
	'+'            reduce using rule 33
	'++'           shift, and enter state 106
	'-'            reduce using rule 33
	'--'           shift, and enter state 107
	'/'            reduce using rule 33
	':='           shift, and enter state 108
	';'            reduce using rule 33
	'<'            reduce using rule 33
	'<='           reduce using rule 33
	'=='           reduce using rule 33
	'>'            reduce using rule 33
	'>='           reduce using rule 33
	'^'            reduce using rule 33
	'||'           reduce using rule 33


State 87

	Stmt -> Dec . ';'                                   (rule 16)

	';'            shift, and enter state 105


State 88

	Block -> '{' ListStmt . '}'                         (rule 13)

	'}'            shift, and enter state 104


State 89

	ListStmt -> Stmt . ListStmt                         (rule 15)

	'!'            shift, and enter state 29
	'('            shift, and enter state 30
	'-'            shift, and enter state 31
	'['            shift, and enter state 91
	'bool'         shift, and enter state 7
	'break'        shift, and enter state 92
	'continue'     shift, and enter state 93
	'false'        shift, and enter state 33
	'if'           shift, and enter state 94
	'int'          shift, and enter state 8
	'maybe'        shift, and enter state 34
	'return'       shift, and enter state 95
	'str'          shift, and enter state 9
	'true'         shift, and enter state 35
	'while'        shift, and enter state 96
	'}'            reduce using rule 14
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 36
	L_quoted       shift, and enter state 37

	Ident          goto state 86
	Integer        goto state 19
	String         goto state 20
	Dec            goto state 87
	ListStmt       goto state 103
	Stmt           goto state 89
	Type           goto state 5
	Expr6          goto state 21
	Tuple          goto state 22
	Expr5          goto state 23
	Expr4          goto state 24
	Expr3          goto state 25
	Expr2          goto state 26
	Expr1          goto state 27
	Expr           goto state 90

State 90

	Stmt -> Expr . ';'                                  (rule 26)

	';'            shift, and enter state 102


State 91

	Type -> '[' . ListType ']'                          (rule 30)
	Tuple -> '[' . ListExpr ']'                         (rule 43)

	'!'            shift, and enter state 29
	'('            shift, and enter state 30
	'-'            shift, and enter state 31
	'['            shift, and enter state 91
	']'            reduce using rule 57
	'bool'         shift, and enter state 7
	'false'        shift, and enter state 33
	'int'          shift, and enter state 8
	'maybe'        shift, and enter state 34
	'str'          shift, and enter state 9
	'true'         shift, and enter state 35
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 36
	L_quoted       shift, and enter state 37

	Ident          goto state 18
	Integer        goto state 19
	String         goto state 20
	Type           goto state 10
	ListType       goto state 11
	Expr6          goto state 21
	Tuple          goto state 22
	Expr5          goto state 23
	Expr4          goto state 24
	Expr3          goto state 25
	Expr2          goto state 26
	Expr1          goto state 27
	Expr           goto state 45
	ListExpr       goto state 46

State 92

	Stmt -> 'break' . ';'                               (rule 24)

	';'            shift, and enter state 101


State 93

	Stmt -> 'continue' . ';'                            (rule 25)

	';'            shift, and enter state 100


State 94

	Stmt -> 'if' . '(' Expr ')' Block                   (rule 21)
	Stmt -> 'if' . '(' Expr ')' Block 'else' Block      (rule 22)

	'('            shift, and enter state 99


State 95

	Stmt -> 'return' . Expr ';'                         (rule 20)

	'!'            shift, and enter state 29
	'('            shift, and enter state 30
	'-'            shift, and enter state 31
	'['            shift, and enter state 32
	'false'        shift, and enter state 33
	'maybe'        shift, and enter state 34
	'true'         shift, and enter state 35
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 36
	L_quoted       shift, and enter state 37

	Ident          goto state 18
	Integer        goto state 19
	String         goto state 20
	Expr6          goto state 21
	Tuple          goto state 22
	Expr5          goto state 23
	Expr4          goto state 24
	Expr3          goto state 25
	Expr2          goto state 26
	Expr1          goto state 27
	Expr           goto state 98

State 96

	Stmt -> 'while' . '(' Expr ')' Block                (rule 23)

	'('            shift, and enter state 97


State 97

	Stmt -> 'while' '(' . Expr ')' Block                (rule 23)

	'!'            shift, and enter state 29
	'('            shift, and enter state 30
	'-'            shift, and enter state 31
	'['            shift, and enter state 32
	'false'        shift, and enter state 33
	'maybe'        shift, and enter state 34
	'true'         shift, and enter state 35
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 36
	L_quoted       shift, and enter state 37

	Ident          goto state 18
	Integer        goto state 19
	String         goto state 20
	Expr6          goto state 21
	Tuple          goto state 22
	Expr5          goto state 23
	Expr4          goto state 24
	Expr3          goto state 25
	Expr2          goto state 26
	Expr1          goto state 27
	Expr           goto state 114

State 98

	Stmt -> 'return' Expr . ';'                         (rule 20)

	';'            shift, and enter state 113


State 99

	Stmt -> 'if' '(' . Expr ')' Block                   (rule 21)
	Stmt -> 'if' '(' . Expr ')' Block 'else' Block      (rule 22)

	'!'            shift, and enter state 29
	'('            shift, and enter state 30
	'-'            shift, and enter state 31
	'['            shift, and enter state 32
	'false'        shift, and enter state 33
	'maybe'        shift, and enter state 34
	'true'         shift, and enter state 35
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 36
	L_quoted       shift, and enter state 37

	Ident          goto state 18
	Integer        goto state 19
	String         goto state 20
	Expr6          goto state 21
	Tuple          goto state 22
	Expr5          goto state 23
	Expr4          goto state 24
	Expr3          goto state 25
	Expr2          goto state 26
	Expr1          goto state 27
	Expr           goto state 112

State 100

	Stmt -> 'continue' ';' .                            (rule 25)

	'!'            reduce using rule 25
	'('            reduce using rule 25
	'-'            reduce using rule 25
	'['            reduce using rule 25
	'bool'         reduce using rule 25
	'break'        reduce using rule 25
	'continue'     reduce using rule 25
	'false'        reduce using rule 25
	'if'           reduce using rule 25
	'int'          reduce using rule 25
	'maybe'        reduce using rule 25
	'return'       reduce using rule 25
	'str'          reduce using rule 25
	'true'         reduce using rule 25
	'while'        reduce using rule 25
	'}'            reduce using rule 25
	L_Ident        reduce using rule 25
	L_integ        reduce using rule 25
	L_quoted       reduce using rule 25


State 101

	Stmt -> 'break' ';' .                               (rule 24)

	'!'            reduce using rule 24
	'('            reduce using rule 24
	'-'            reduce using rule 24
	'['            reduce using rule 24
	'bool'         reduce using rule 24
	'break'        reduce using rule 24
	'continue'     reduce using rule 24
	'false'        reduce using rule 24
	'if'           reduce using rule 24
	'int'          reduce using rule 24
	'maybe'        reduce using rule 24
	'return'       reduce using rule 24
	'str'          reduce using rule 24
	'true'         reduce using rule 24
	'while'        reduce using rule 24
	'}'            reduce using rule 24
	L_Ident        reduce using rule 24
	L_integ        reduce using rule 24
	L_quoted       reduce using rule 24


State 102

	Stmt -> Expr ';' .                                  (rule 26)

	'!'            reduce using rule 26
	'('            reduce using rule 26
	'-'            reduce using rule 26
	'['            reduce using rule 26
	'bool'         reduce using rule 26
	'break'        reduce using rule 26
	'continue'     reduce using rule 26
	'false'        reduce using rule 26
	'if'           reduce using rule 26
	'int'          reduce using rule 26
	'maybe'        reduce using rule 26
	'return'       reduce using rule 26
	'str'          reduce using rule 26
	'true'         reduce using rule 26
	'while'        reduce using rule 26
	'}'            reduce using rule 26
	L_Ident        reduce using rule 26
	L_integ        reduce using rule 26
	L_quoted       reduce using rule 26


State 103

	ListStmt -> Stmt ListStmt .                         (rule 15)

	'}'            reduce using rule 15


State 104

	Block -> '{' ListStmt '}' .                         (rule 13)

	'!'            reduce using rule 13
	'('            reduce using rule 13
	'-'            reduce using rule 13
	';'            reduce using rule 13
	'['            reduce using rule 13
	'bool'         reduce using rule 13
	'break'        reduce using rule 13
	'continue'     reduce using rule 13
	'else'         reduce using rule 13
	'false'        reduce using rule 13
	'if'           reduce using rule 13
	'int'          reduce using rule 13
	'maybe'        reduce using rule 13
	'return'       reduce using rule 13
	'str'          reduce using rule 13
	'true'         reduce using rule 13
	'while'        reduce using rule 13
	'}'            reduce using rule 13
	L_Ident        reduce using rule 13
	L_integ        reduce using rule 13
	L_quoted       reduce using rule 13
	%eof           reduce using rule 13


State 105

	Stmt -> Dec ';' .                                   (rule 16)

	'!'            reduce using rule 16
	'('            reduce using rule 16
	'-'            reduce using rule 16
	'['            reduce using rule 16
	'bool'         reduce using rule 16
	'break'        reduce using rule 16
	'continue'     reduce using rule 16
	'false'        reduce using rule 16
	'if'           reduce using rule 16
	'int'          reduce using rule 16
	'maybe'        reduce using rule 16
	'return'       reduce using rule 16
	'str'          reduce using rule 16
	'true'         reduce using rule 16
	'while'        reduce using rule 16
	'}'            reduce using rule 16
	L_Ident        reduce using rule 16
	L_integ        reduce using rule 16
	L_quoted       reduce using rule 16


State 106

	Stmt -> Ident '++' . ';'                            (rule 18)

	';'            shift, and enter state 111


State 107

	Stmt -> Ident '--' . ';'                            (rule 19)

	';'            shift, and enter state 110


State 108

	Stmt -> Ident ':=' . Expr ';'                       (rule 17)

	'!'            shift, and enter state 29
	'('            shift, and enter state 30
	'-'            shift, and enter state 31
	'['            shift, and enter state 32
	'false'        shift, and enter state 33
	'maybe'        shift, and enter state 34
	'true'         shift, and enter state 35
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 36
	L_quoted       shift, and enter state 37

	Ident          goto state 18
	Integer        goto state 19
	String         goto state 20
	Expr6          goto state 21
	Tuple          goto state 22
	Expr5          goto state 23
	Expr4          goto state 24
	Expr3          goto state 25
	Expr2          goto state 26
	Expr1          goto state 27
	Expr           goto state 109

State 109

	Stmt -> Ident ':=' Expr . ';'                       (rule 17)

	';'            shift, and enter state 117


State 110

	Stmt -> Ident '--' ';' .                            (rule 19)

	'!'            reduce using rule 19
	'('            reduce using rule 19
	'-'            reduce using rule 19
	'['            reduce using rule 19
	'bool'         reduce using rule 19
	'break'        reduce using rule 19
	'continue'     reduce using rule 19
	'false'        reduce using rule 19
	'if'           reduce using rule 19
	'int'          reduce using rule 19
	'maybe'        reduce using rule 19
	'return'       reduce using rule 19
	'str'          reduce using rule 19
	'true'         reduce using rule 19
	'while'        reduce using rule 19
	'}'            reduce using rule 19
	L_Ident        reduce using rule 19
	L_integ        reduce using rule 19
	L_quoted       reduce using rule 19


State 111

	Stmt -> Ident '++' ';' .                            (rule 18)

	'!'            reduce using rule 18
	'('            reduce using rule 18
	'-'            reduce using rule 18
	'['            reduce using rule 18
	'bool'         reduce using rule 18
	'break'        reduce using rule 18
	'continue'     reduce using rule 18
	'false'        reduce using rule 18
	'if'           reduce using rule 18
	'int'          reduce using rule 18
	'maybe'        reduce using rule 18
	'return'       reduce using rule 18
	'str'          reduce using rule 18
	'true'         reduce using rule 18
	'while'        reduce using rule 18
	'}'            reduce using rule 18
	L_Ident        reduce using rule 18
	L_integ        reduce using rule 18
	L_quoted       reduce using rule 18


State 112

	Stmt -> 'if' '(' Expr . ')' Block                   (rule 21)
	Stmt -> 'if' '(' Expr . ')' Block 'else' Block      (rule 22)

	')'            shift, and enter state 116


State 113

	Stmt -> 'return' Expr ';' .                         (rule 20)

	'!'            reduce using rule 20
	'('            reduce using rule 20
	'-'            reduce using rule 20
	'['            reduce using rule 20
	'bool'         reduce using rule 20
	'break'        reduce using rule 20
	'continue'     reduce using rule 20
	'false'        reduce using rule 20
	'if'           reduce using rule 20
	'int'          reduce using rule 20
	'maybe'        reduce using rule 20
	'return'       reduce using rule 20
	'str'          reduce using rule 20
	'true'         reduce using rule 20
	'while'        reduce using rule 20
	'}'            reduce using rule 20
	L_Ident        reduce using rule 20
	L_integ        reduce using rule 20
	L_quoted       reduce using rule 20


State 114

	Stmt -> 'while' '(' Expr . ')' Block                (rule 23)

	')'            shift, and enter state 115


State 115

	Stmt -> 'while' '(' Expr ')' . Block                (rule 23)

	'{'            shift, and enter state 83

	Block          goto state 119

State 116

	Stmt -> 'if' '(' Expr ')' . Block                   (rule 21)
	Stmt -> 'if' '(' Expr ')' . Block 'else' Block      (rule 22)

	'{'            shift, and enter state 83

	Block          goto state 118

State 117

	Stmt -> Ident ':=' Expr ';' .                       (rule 17)

	'!'            reduce using rule 17
	'('            reduce using rule 17
	'-'            reduce using rule 17
	'['            reduce using rule 17
	'bool'         reduce using rule 17
	'break'        reduce using rule 17
	'continue'     reduce using rule 17
	'false'        reduce using rule 17
	'if'           reduce using rule 17
	'int'          reduce using rule 17
	'maybe'        reduce using rule 17
	'return'       reduce using rule 17
	'str'          reduce using rule 17
	'true'         reduce using rule 17
	'while'        reduce using rule 17
	'}'            reduce using rule 17
	L_Ident        reduce using rule 17
	L_integ        reduce using rule 17
	L_quoted       reduce using rule 17


State 118

	Stmt -> 'if' '(' Expr ')' Block .                   (rule 21)
	Stmt -> 'if' '(' Expr ')' Block . 'else' Block      (rule 22)

	'!'            reduce using rule 21
	'('            reduce using rule 21
	'-'            reduce using rule 21
	'['            reduce using rule 21
	'bool'         reduce using rule 21
	'break'        reduce using rule 21
	'continue'     reduce using rule 21
	'else'         shift, and enter state 120
	'false'        reduce using rule 21
	'if'           reduce using rule 21
	'int'          reduce using rule 21
	'maybe'        reduce using rule 21
	'return'       reduce using rule 21
	'str'          reduce using rule 21
	'true'         reduce using rule 21
	'while'        reduce using rule 21
	'}'            reduce using rule 21
	L_Ident        reduce using rule 21
	L_integ        reduce using rule 21
	L_quoted       reduce using rule 21


State 119

	Stmt -> 'while' '(' Expr ')' Block .                (rule 23)

	'!'            reduce using rule 23
	'('            reduce using rule 23
	'-'            reduce using rule 23
	'['            reduce using rule 23
	'bool'         reduce using rule 23
	'break'        reduce using rule 23
	'continue'     reduce using rule 23
	'false'        reduce using rule 23
	'if'           reduce using rule 23
	'int'          reduce using rule 23
	'maybe'        reduce using rule 23
	'return'       reduce using rule 23
	'str'          reduce using rule 23
	'true'         reduce using rule 23
	'while'        reduce using rule 23
	'}'            reduce using rule 23
	L_Ident        reduce using rule 23
	L_integ        reduce using rule 23
	L_quoted       reduce using rule 23


State 120

	Stmt -> 'if' '(' Expr ')' Block 'else' . Block      (rule 22)

	'{'            shift, and enter state 83

	Block          goto state 121

State 121

	Stmt -> 'if' '(' Expr ')' Block 'else' Block .      (rule 22)

	'!'            reduce using rule 22
	'('            reduce using rule 22
	'-'            reduce using rule 22
	'['            reduce using rule 22
	'bool'         reduce using rule 22
	'break'        reduce using rule 22
	'continue'     reduce using rule 22
	'false'        reduce using rule 22
	'if'           reduce using rule 22
	'int'          reduce using rule 22
	'maybe'        reduce using rule 22
	'return'       reduce using rule 22
	'str'          reduce using rule 22
	'true'         reduce using rule 22
	'while'        reduce using rule 22
	'}'            reduce using rule 22
	L_Ident        reduce using rule 22
	L_integ        reduce using rule 22
	L_quoted       reduce using rule 22


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 71
Number of terminals: 43
Number of non-terminals: 25
Number of states: 122
