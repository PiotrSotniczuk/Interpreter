-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParFlatte
  ( happyError
  , myLexer
  , pProgram
  ) where

import Prelude

import qualified AbsFlatte
import LexFlatte

}

%name pProgram Program
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '!' { PT _ (TS _ 1) }
  '!=' { PT _ (TS _ 2) }
  '%' { PT _ (TS _ 3) }
  '&&' { PT _ (TS _ 4) }
  '(' { PT _ (TS _ 5) }
  ')' { PT _ (TS _ 6) }
  '*' { PT _ (TS _ 7) }
  '+' { PT _ (TS _ 8) }
  '++' { PT _ (TS _ 9) }
  ',' { PT _ (TS _ 10) }
  '-' { PT _ (TS _ 11) }
  '--' { PT _ (TS _ 12) }
  '/' { PT _ (TS _ 13) }
  ':' { PT _ (TS _ 14) }
  ':&' { PT _ (TS _ 15) }
  ':=' { PT _ (TS _ 16) }
  ';' { PT _ (TS _ 17) }
  '<' { PT _ (TS _ 18) }
  '<=' { PT _ (TS _ 19) }
  '==' { PT _ (TS _ 20) }
  '>' { PT _ (TS _ 21) }
  '>=' { PT _ (TS _ 22) }
  '[' { PT _ (TS _ 23) }
  ']' { PT _ (TS _ 24) }
  '^' { PT _ (TS _ 25) }
  'bool' { PT _ (TS _ 26) }
  'break' { PT _ (TS _ 27) }
  'continue' { PT _ (TS _ 28) }
  'else' { PT _ (TS _ 29) }
  'false' { PT _ (TS _ 30) }
  'if' { PT _ (TS _ 31) }
  'int' { PT _ (TS _ 32) }
  'maybe' { PT _ (TS _ 33) }
  'return' { PT _ (TS _ 34) }
  'str' { PT _ (TS _ 35) }
  'true' { PT _ (TS _ 36) }
  'while' { PT _ (TS _ 37) }
  '{' { PT _ (TS _ 38) }
  '||' { PT _ (TS _ 39) }
  '}' { PT _ (TS _ 40) }
  L_Ident  { PT _ (TV $$) }
  L_integ  { PT _ (TI $$) }
  L_quoted { PT _ (TL $$) }

%%

Ident :: { AbsFlatte.Ident }
Ident  : L_Ident { AbsFlatte.Ident $1 }

Integer :: { Integer }
Integer  : L_integ  { (read $1) :: Integer }

String  :: { String }
String   : L_quoted { $1 }

Program :: { AbsFlatte.Program }
Program : Dec { AbsFlatte.ProgramDef $1 }

Dec :: { AbsFlatte.Dec }
Dec : Type Ident '(' ListArg ')' ':=' Block { AbsFlatte.FDec $1 $2 $4 $7 }
    | Type Ident { AbsFlatte.VDec $1 $2 }
    | Type Ident ':=' Expr { AbsFlatte.VdecInit $1 $2 $4 }

Arg :: { AbsFlatte.Arg }
Arg : Ident ':' Type { AbsFlatte.ValArg $1 $3 }
    | Ident ':&' Type { AbsFlatte.RefArg $1 $3 }

ListArg :: { [AbsFlatte.Arg] }
ListArg : {- empty -} { [] }
        | Arg { (:[]) $1 }
        | Arg ',' ListArg { (:) $1 $3 }

Block :: { AbsFlatte.Block }
Block : '{' ListStmt '}' { AbsFlatte.BlockStmt $2 }

ListStmt :: { [AbsFlatte.Stmt] }
ListStmt : {- empty -} { [] } | Stmt ListStmt { (:) $1 $2 }

Stmt :: { AbsFlatte.Stmt }
Stmt : Dec ';' { AbsFlatte.DecStmt $1 }
     | Ident ':=' Expr ';' { AbsFlatte.Assign $1 $3 }
     | Ident '++' ';' { AbsFlatte.Incr $1 }
     | Ident '--' ';' { AbsFlatte.Decr $1 }
     | 'return' Expr ';' { AbsFlatte.Ret $2 }
     | 'if' '(' Expr ')' Block { AbsFlatte.If $3 $5 }
     | 'if' '(' Expr ')' Block 'else' Block { AbsFlatte.IfElse $3 $5 $7 }
     | 'while' '(' Expr ')' Block { AbsFlatte.While $3 $5 }
     | 'break' ';' { AbsFlatte.Break }
     | 'continue' ';' { AbsFlatte.Cont }
     | Expr ';' { AbsFlatte.SExp $1 }

Type :: { AbsFlatte.Type }
Type : 'int' { AbsFlatte.Int }
     | 'str' { AbsFlatte.Str }
     | 'bool' { AbsFlatte.Bool }
     | '[' ListType ']' { AbsFlatte.TypTuple $2 }

ListType :: { [AbsFlatte.Type] }
ListType : Type { (:[]) $1 } | Type ',' ListType { (:) $1 $3 }

Expr6 :: { AbsFlatte.Expr }
Expr6 : Ident { AbsFlatte.EVar $1 }
      | Integer { AbsFlatte.ELitInt $1 }
      | String { AbsFlatte.ELitStr $1 }
      | '[' ListExpr ']' { AbsFlatte.ETup $2 }
      | Expr6 '^' Integer { AbsFlatte.ETupTak $1 $3 }
      | 'true' { AbsFlatte.ELitTrue }
      | 'false' { AbsFlatte.ELitFalse }
      | 'maybe' { AbsFlatte.ELitMaybe }
      | Ident '(' ListExpr ')' { AbsFlatte.ERunFun $1 $3 }
      | '(' Expr ')' { $2 }

Expr5 :: { AbsFlatte.Expr }
Expr5 : '-' Expr6 { AbsFlatte.EMinus $2 }
      | '!' Expr6 { AbsFlatte.ENot $2 }
      | Expr6 { $1 }

Expr4 :: { AbsFlatte.Expr }
Expr4 : Expr4 MulOp Expr5 { AbsFlatte.EMul $1 $2 $3 }
      | Expr5 { $1 }

Expr3 :: { AbsFlatte.Expr }
Expr3 : Expr3 AddOp Expr4 { AbsFlatte.EAdd $1 $2 $3 }
      | Expr4 { $1 }

Expr2 :: { AbsFlatte.Expr }
Expr2 : Expr2 CompOp Expr3 { AbsFlatte.EComp $1 $2 $3 }
      | Expr3 { $1 }

Expr1 :: { AbsFlatte.Expr }
Expr1 : Expr2 '&&' Expr1 { AbsFlatte.EAnd $1 $3 } | Expr2 { $1 }

Expr :: { AbsFlatte.Expr }
Expr : Expr1 '||' Expr { AbsFlatte.EOr $1 $3 } | Expr1 { $1 }

ListExpr :: { [AbsFlatte.Expr] }
ListExpr : {- empty -} { [] }
         | Expr { (:[]) $1 }
         | Expr ',' ListExpr { (:) $1 $3 }

AddOp :: { AbsFlatte.AddOp }
AddOp : '+' { AbsFlatte.Plus } | '-' { AbsFlatte.Minus }

MulOp :: { AbsFlatte.MulOp }
MulOp : '*' { AbsFlatte.Times }
      | '/' { AbsFlatte.Div }
      | '%' { AbsFlatte.Mod }

CompOp :: { AbsFlatte.CompOp }
CompOp : '<' { AbsFlatte.LTH }
       | '<=' { AbsFlatte.LE }
       | '>' { AbsFlatte.GTH }
       | '>=' { AbsFlatte.GE }
       | '==' { AbsFlatte.EQU }
       | '!=' { AbsFlatte.NE }
{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

